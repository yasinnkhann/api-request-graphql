/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Film: { // root type
    director?: string | null; // String
    episode_id?: number | null; // Int
    opening_crawl?: string | null; // String
    producer?: string | null; // String
    release_date?: string | null; // String
    title?: string | null; // String
  }
  Person: { // root type
    birth_year?: string | null; // String
    eye_color?: string | null; // String
    gender?: string | null; // String
    hair_color?: string | null; // String
    height?: string | null; // String
    mass?: string | null; // String
    name?: string | null; // String
    skin_color?: string | null; // String
  }
  Planet: { // root type
    name?: string | null; // String
    orbital_period?: string | null; // String
    rotation_period?: string | null; // String
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Film: { // field return type
    director: string | null; // String
    episode_id: number | null; // Int
    opening_crawl: string | null; // String
    producer: string | null; // String
    release_date: string | null; // String
    title: string | null; // String
  }
  Person: { // field return type
    birth_year: string | null; // String
    eye_color: string | null; // String
    films: Array<NexusGenRootTypes['Film'] | null> | null; // [Film]
    gender: string | null; // String
    hair_color: string | null; // String
    height: string | null; // String
    homeworld: NexusGenRootTypes['Planet'] | null; // Planet
    mass: string | null; // String
    name: string | null; // String
    skin_color: string | null; // String
  }
  Planet: { // field return type
    films: Array<NexusGenRootTypes['Film'] | null> | null; // [Film]
    name: string | null; // String
    orbital_period: string | null; // String
    rotation_period: string | null; // String
  }
  Query: { // field return type
    getPerson: NexusGenRootTypes['Person'] | null; // Person
    hello: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Film: { // field return type name
    director: 'String'
    episode_id: 'Int'
    opening_crawl: 'String'
    producer: 'String'
    release_date: 'String'
    title: 'String'
  }
  Person: { // field return type name
    birth_year: 'String'
    eye_color: 'String'
    films: 'Film'
    gender: 'String'
    hair_color: 'String'
    height: 'String'
    homeworld: 'Planet'
    mass: 'String'
    name: 'String'
    skin_color: 'String'
  }
  Planet: { // field return type name
    films: 'Film'
    name: 'String'
    orbital_period: 'String'
    rotation_period: 'String'
  }
  Query: { // field return type name
    getPerson: 'Person'
    hello: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    getPerson: { // args
      id: number; // Int!
    }
    hello: { // args
      name?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}